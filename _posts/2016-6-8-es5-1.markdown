---
layout: post
title: ES5新增内置方法总结
subtitle: "Array，Object对象上的方法"
date: 2016-06-08
author: w567675
---
> This document is not completed and will be updated anytime.



## 前言

如今ES6都流行了，可怜ES5还没有熟练掌握，所以还是老老实实的先总结下ES5的新增的一些东西。

---





### Array
5个迭代方法:

 * [forEach](#arrayprototypeforeach)
 * [map](#map)
 * [filter]
 * [some]
 * [every]

2个归并方法:

 * [reduce]
 * [reduceRight]

2个索引方法:

 * [indexOf]
 * [lastindexOf]

#### Array.prototype.forEach()
 > forEach() 方法让数组的每一项都执行一次给定的函数

**语法**

```js
array.forEach(callback[, thisArg])
```


**参数**

 - callback，循环执行的给定函数，接受3个参数：
   - `value` 当前项（指遍历时正在被处理那个数组项）的值。
   - `index` 当前项的索引（或下标）。
   - `array` 数组本身
 - thisArg, 可选参数。用来当作callback 函数内this的值的对象。


**如何使用**

forEach 方法按升序为数组中含有效值的每一项执行一次callback 函数。

```js
var arr = [1, 2, 3];
arr.forEach(function(value, index, arr) {
	console.log(value, index, arr);
});

/*
1 0 [1, 2, 3]
2 1 [1, 2, 3]
3 2 [1, 2, 3]
*/
```

删除第二项，第三项的值改为`undefined`，第四项值改为10，

```js
var arr = [1, 2, 3, 4];
arr.forEach(function(value, index, arr2) {
	delete arr2[1]; //删除第二项
	arr2[2] = undefined; //改为`undefined`
	arr2[3] = 10;
	console.log(value, index, arr);
	console.log(arr2 === arr)  // true, 说明 arr2 和arr 指向的是同一对象的引用地址
});

/*
1 0 [1, 2: undefined, 3: 10]
undefined 2 [1, 2: undefined, 3: 10]
10 3 [1, 2: undefined, 3: 10]
*/
```
如果已经存在的值被改变，则传递给 callback 的值是 forEach 遍历到他们**那一刻的值**。已删除的项不会被遍历到，那些已删除（使用delete方法等情况）或者从未赋值的项将被**跳过**（但不包括哪些值为 `undefined` 的项）。


forEach 遍历的范围在第一次调用 callback 前就会确定。调用forEach **后添加**到数组中的项不会被 callback 访问到。

```
var arr = [1, 2, 3];
arr.forEach(function(value, index, arr) {
	arr.push('新来的');
	console.log(value, index, arr);
});
/*
1 0 [1, 2, 3, "新来的"]
2 1 [1, 2, 3, "新来的", "新来的"]
3 2 [1, 2, 3, "新来的", "新来的", "新来的"]
*/
```


### to be continue...