---
layout: post
title: 原码、反码、补码
subtitle: "位运算"
date: 2016-06-15
author: w567675
header-img: "img/binary-bg.jpg"
tags:
    - 随手笔记
---
> This document is not completed and will be updated anytime.



## 前言

本文是讲解原码、反码、补码的基础认识。

---





### 机器数和真值
在讲解原码、反码、补码、之前先了解下什么是**机器数**和**真值**。

**机器数**

[机器数](http://baike.baidu.com/link?url=1s9kAtSjXZXjUDaq_0DvslBjdsKAx1NB6JPyNoHB3z86VLdfI91jb64W7_DsS5d1eEnvVRn8WE299-DWY0Am6_){:target="_blank"}（computer number）是将符号"数字化"的数，是数字在计算机中的``二进制``表示形式。机器数有2个特点：一是符号数字化，二是其数的大小受机器字长的限制。

机器数是带符号的，在计算机用一个数的**最高位**来存放符号, 正数为0， 负数为1。例如：

十进制的正数 ``+3``，计算机字长位8位，转换成二进制就是 ``0000 0011``。如果是负数 ``-3``，转换成二进制就是 ``1000 0011``。 这里的 ``0000 0011`` 和 ``1000 0011`` 就是**机器数**。

**真值**

因为**第一位是符号位**，所以**机器数的形式值就不等于真正的数值**。例如上面的有符号数 10000011，其最高位1代表负，其真正数值是 ``-3`` 而不是形式值 ``131``（1000 0011转换成十进制等于131）。所以，为区别起见，将**带符号位的机器数对应的真正数值称为机器数的真值**。



```js
parseInt('10000011', 2); // 131
```

真正的真值就是去掉最高位符号位：

```js
0000 0001 的真值 =>  + 000 0001 =  + 1
//                  ^--------符号位

1000 0001 的真值 =>  - 000 0001 =  - 1
//                  ^--------符号位
```


### 原码、反码、补码

**原码**

[原码](http://baike.baidu.com/view/60480.htm){:target="_blank"} (true form)是一种计算机中对数字的二进制定点表示方法。原码表示法在数值前面增加了一位符号位（即最高位为符号位）：正数该位为 ``0``，负数该位为 ``1``（0有两种表示：+0和-0），**其余位表示数值的大小**。

说简单点就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值.

```js
|+1| = [0000 0001] 原

|-1| = [1000 0001] 原
```
所以在 ``8位的 二进制`` 的取值范围就是固定了

```js

[1111 1111, 0111 1111] => [-127, 127]
```

**反码**

[反码](http://baike.baidu.com/view/742694.htm){:target="_blank"} (ones' complement)， 在计算机内，定点数有3种表示法：原码、反码和补码。反码是数值存储的一种，但是由于**补码更能有效**表现数字在计算机中的形式，所以多数计算机一般都**不采用反码表示数**。


反码表示法规定：**正数的反码与其原码相同**，**负数的反码是对其原码逐位取反**，但``符号位除外``。

```js
|+1| = [0000 0001] 原 = [0000 0001] 反

|-1| = [1000 0001] 原 = [1111 1110] 反

```

**补码**

[补码](http://baike.baidu.com/view/377340.htm){:target="_blank"}(two's complement representation)，在计算机系统中，**数值一律用补码来表示和存储**。原因在于，使用补码，可以将符号位和数值域统一处理；同时，加法和减法也可以统一处理。此外，补码与原码相互转换，其运算过程是相同的，不需要额外的硬件电路。


补码的表示方法是: **正数的补码与其原码相同**,  负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1。 **(负数即在反码的基础上+1)**

```js
|+1| = [0000 0001] 原 = [0000 0001] 反 = [0000 0001] 补

|-1| = [1000 0001] 原 = [1111 1110] 反 = [1111 1111] 补

```

### to be continue...