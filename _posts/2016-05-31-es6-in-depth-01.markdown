---
layout: post
title: ES6深入浅出（一）
subtitle: "let, const"
date: 2016-05-31
author: w567675
header-img: "img/post-bg-es6.jpg"
tags:
    - ES6
---

## 前言

ES6深入浅出系列文章，是本文作者在学习javascript的ES6规范时记录下的笔记。

主要阅读了 阮一峰老师的[《ECMAScript 6入门》](http://es6.ruanyifeng.com/) 以及 [《深入浅出ES6》](http://www.infoq.com/cn/es6-in-depth/)

---


## ES6 是什么？

编程语言JavaScript是ECMAScript的实现和扩展，由ECMA（类似W3C的标准组织）来指定标准化。主要定义了：

* [语法语言](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar){:target="_blank"} -  语法解析、语句、声明、运算等。
* [类型](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures){:target="_blank"} - 数字、字符串、对象、布尔型等
* [原型于继承](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects){:target="_blank"} - 原型链
* 内置对象和函数标准库 - [JSON](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON){:target="_blank"}、[Math](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array){:target="_blank"}、[数值方法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array){:target="_blank"}、[对象自省方法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object){:target="_blank"}等

早在2009年，上一版的ES5刚刚发布，ES标准委员会又开始JS新的标准 —— `ES6`。

ES6是一次比较重大的变革，与此同时呢，由于ES6秉承最大化兼容现有代码的设计理念（不这样，那不是死翘翘了☹ ）,你以前变形的JS代码能继续正常运行。到目前为止，已经很多浏览器开始支持ES6的部分特性，并且逐渐支持更多的特性。代表性的浏览器就是[Chrome](http://www.google.cn/chrome/browser/desktop/index.html){:target="_blank"} (收取广告费么^O^  )。 其他浏览器是否支持你可以通过 [Can i use](http://caniuse.com/){:target="_blank"} 来查询。

> IE8这种低版本的浏览器也能通过 [babel](https://babeljs.io/){:target="_blank"}  来进行 ES6 降级到 ES5 语法，再通过 [es5-shim、es5-sham](https://github.com/es-shims/es5-shim){:target="_blank"} 来支持 ES5 方法。 [Demo](https://github.com/w567675/webpack-es6-testdemo){:target="_blank"}

> 搭配使用 [webpack](https://webpack.github.io/){:target="_blank"} 更是谁用谁知道， 妈妈再也不用担心了。 o(*￣︶￣*)o。


### let 语法
> 在介绍 `let` 之前我们谈谈2个比较典型的问题。


<s id="qusetion-1"></s>

#### 问题#1： JS没有块级作用域
```js
function setTime(time) {
	var t = time;
	$btn.on('click', function() {
		var x = parseInt(t)//这里使用t变量
	});
	...
	//更多代码
}
```
上述代码执行没有什么问题。在click事件中调用外部作用域的变量 `t` ,一切都是那么美好。
再看看下面修改过的例子：

```js
function setTime(time, day) {
	var t = time;
	$btn.on('click', function() {
		var x = parseInt(t)//这里使用t变量
		if(day < 5) {
			var t = time + 1;
		}
	});
	...
	//更多代码
}
```




第一次的代码还能正常运行。现在你无意中又在click事件中定义了个变量 `t` 。结果导致click事件使用的变量 `t` 是内部定义的变量 `t` ， 而不是外部定义的变量 `t` 。为什么呢?
因为在使用`var`声明变量的时候，**其作用域从声明处开始向前后两个方向扩散，直到触及函数边界才停止扩散** 。这种变量 `t` 作用域甚广，所以在进入函数的时候就会 **立马创建变量** `t` ，这就是所谓的 *提升(hoisting)* , 提升就是JS引擎把 `var`声明 和 `function` 函数声明都会提升到该存在的作用域的最开始的位置。
上述代码的结果就是;

```js
  var t;
  var x = parseInt(t); //NaN
  t = 1;
```
这种问题极难定位，尤其是当你的代码量远超上面这个极小的示例，你会发狂到崩溃。<img src="http://wp.patheos.com.s3.amazonaws.com/blogs/exploringourmatrix/files/2013/07/Im-so-so-sorry.gif" width = "300" style="margin: 0">

<s id="qusetion-2"></s>

#### 问题#2： 循环内变量过度共享
```js
  var arr = [1, 2, 3];
  for(var i = 0; i < arr.length; i ++) {
    alert(arr[i]) //输出1, 2, 3
  }
```

上述代码如期望的那样分3次 `alert` 出1,2,3的结果。

> 请不要轻易使用 `alert` 来实现web页面中的功能，`alert`会打断js的执行。我之所以在代码中使用是因为 `alert` 特性使它变成一个非常典型的示例。

看下面的代码示例：

```js
  var arr = [1, 2, 3];
  for(var i = 0; i < arr.length; i ++) {
    setTimeout(function(){
      alert(arr[i])
    }, 500);
  }
```

这一次没有想期望的那样分3次 `alert` 出1,2,3的结果。而是3次 `undefined`。应为3次setTimeout 共享了 唯一的变量 `i`。当循环完毕时候`i = 3` (因为arr.length === 3)。此时setTimeout还没有被执行，当执行setTimeout的时候就是 `alert(arr[i])` (undefined)。

解决这个问题有很多种方法， 比如下面示例那样，使用 [IIFE 立即执行函数](https://developer.mozilla.org/zh-CN/docs/Glossary/IIFE){:target="_blank"} 来创建私有作用域来保存变量 `i`。

```js
  var arr = [1, 2, 3];
  for(var i = 0; i < arr.length; i ++) {
    (function(i){
      setTimeout(function(){
        alert(arr[i])
      }, 500);
    })(i)
  }
```

当然有没有更好的方案？

#### let 是更完美的 var

ES6新增了 `let` 命令，用来声明变量。它的用法类似于 `var`，但是所声明的变量，只在`let`命令所在的代码块内有效。

```js
  {
    let a = 1;
    var b = 2;
  }

  a // ReferenceError: a is not defined.
  b // 2
```
上述代码使用了 `{ }` (块级作用域), 在里面用 `let` 声明了变量a, `var`声明了变量b。在块级作用域之调用变量a和变量b。结果用 `let` 声明的变量a报 is not defined 的错误。用`var`声明的变量b正确输出2。说明 `let` 只能在其所在的作用域能够调用，在其外部的作用域无法被调用。

还记得上面提到的[问题#1： JS没有块级作用域么](#qusetion-1)？ `let` 已经完美解决了：

```js
function setTime(time, day) {
  var t = time; 
  $btn.on('click', function() {
    var x = parseInt(t)//这里使用t变量是 外部作用域的变量t
    if(day < 5) {
      let t = time + 1; //这里变量t有自己的块状作用域，不会被外部调用
    }
  });
  ...
  //更多代码
}
```
以及[问题#2： 循环内变量过度共享](#qusetion-2)也能用 `let` 解决：

```js
  var arr = [1, 2, 3];
  for(let i = 0; i < arr.length; i ++) { //使用 let 代替 var
    setTimeout(function(){
      alert(arr[i])
    }, 500);
  }
```

<s id="no-up"></s>

#### let 不存在变量提升
```js
 
  console.log(b); // undefined
  console.log(a); // ReferenceError: a is not  defined
  var b = 2;
  let a = 1;
```
变量提升的概念在[问题#1： JS没有块级作用域么](#qusetion-1)有提及过。这里变量 **b** 使用 `var` 声明，会被提升到在其作用域内的顶部，但是并没有被赋值，所以输出 **undefined** 。但是用 `let` 声明的变量 **a** 并没有这样的情况，直接出现 **a** 没有被声明的语法报错。


<s id="die-area"></s>

#### “暂时性死区”
```js
  var a = 1;
  if(true) {
    console.log(a) // ReferenceError: a is not  defined
    let a;
  }
```
ES6明确规定，如果区块中存在 `let` 和 [const](#const)命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。
使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称TDZ）。

> 这样能保持很好的编程习惯：使用前必须先声明。

这个特性也同样的影响了 `typeof`。之前我们可能会写出这样的代码：

```js
typeof a; // undefined
```
上面的代码没错，作为比较看下面的代码:

```js
typeof a; // ReferenceError: a is not  defined
let a;
```
如果一个变量使用 `let` 声明，如果在之前使用 `typeof` 反而会报错，这意味着 `typoef` 不是 100% 安全的操作了。

#### 不能重复声明变量

let不允许在相同作用域内，重复声明同一个变量。以下2中重复声明的代码， `报错Identifier 'a' has already been declared`。

```js
let a = 1;
var a = 2; 
```

```js
let a = 1;
let a = 2; 
```

#### 块级作用域

为什么会引入块级作用域？ 还记得[问题#1： JS没有块级作用域](#qusetion-1)。变量提升导致的报错么？


在ES5的时候只有 **全局作用域** 和** 函数作用域**。到了ES6出现了 **块级作用域**。实际上是 `let` 带来了块级作用域，
对比下以下2段代码， 你就知道为什么这么说了。

```js
if(true) {
  var a = 1;
  console.log(a) // 1
}
console.log(a) // 1
```

```js
if(true) {
  let a = 1; // 在块状作用域内用let声明了变量a
  console.log(a) // 1
}
console.log(a) // ReferenceError: a is not  defined
```

ES6 允许块作用域任意的嵌套

```js
  {
    {
      {
        let a = 1;
      }
    }
  }
```
当然外部块级作用域无法访问内部块级作用域的变量

```js
 {
  {
    let a = 1;
  }
  console.log(a) // ReferenceError: a is not  defined
 }
```

另外，ES6也规定，函数本身的作用域，在其所在的块级作用域之内。

```js
function f() { console.log('I am outside!'); }
(function () {
  if(false) {
    // 重复声明一次函数f
    function f() { console.log('I am inside!'); }
  }
  f();
}());
````

上面代码在ES5中运行，会得到“I am inside!”，但是在ES6中运行，会得到“I am outside!”。这是因为ES5存在函数提升，不管会不会进入 if代码块，函数声明都会提升到当前作用域的顶部，得到执行；而ES6支持块级作用域，不管会不会进入if代码块，其内部声明的函数皆不会影响到作用域的外部。


### const 语法

是的，还有一个新的关键词！
ES6引入的第三个声明类关键词与 `let `类似：`const`。

`const` 声明的变量与 `let 声明的变量类似，它们的不同之处在于，const声明的变量只可以在声明时赋值，不可随意修改，否则会导致SyntaxError（语法错误）。

```js
const PI = 3.14; // 正确
PI = 1; // 报错 Assignment to constant variable.
PI ++ ; // 报错 Assignment to constant variable.
```

#### 用 const 声明一个复合类型的变量

在使用 `const` 声明一个复合类型的变量的时候需要格外注意。声明的变量指向的是数据的地址，而不是数据本身。这意味着数据 `const` 命令只是保证变量名指向的地址不变，并不保证该地址的数据不变。如下代码：

```js
  const a = []
  a.push(1) // 进行push操作
  console.log(a) // [1]
  a = [2]; // 报错 Assignment to constant variable
```



`const` 其他的特性基本和 `let` 一致: [变量不提升](#no-up)、[暂时性死区](#die-area)。


时间不早，洗洗睡吧

<img src="http://img1.gtimg.com/news/pics/hv1/65/118/1491/96982430.jpg" style="margin: 0">


